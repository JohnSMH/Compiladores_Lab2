Terminals unused in grammar

   boolean


Grammar

    0 $accept: lines $end

    1 lines: lines expr '\n'
    2      | lines '\n'
    3      | /* empty */

    4 expr: expr OR term
    5     | term

    6 term: term AND factor
    7     | factor

    8 factor: NOT factor
    9       | '(' expr ')'
   10       | TRUE
   11       | FALSE


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1 2
'(' (40) 9
')' (41) 9
error (256)
AND (258) 6
OR (259) 4
NOT (260) 8
TRUE (261) 10
FALSE (262) 11
boolean (263)


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
lines (13)
    on left: 1 2 3, on right: 0 1 2
expr (14)
    on left: 4 5, on right: 1 4 9
term (15)
    on left: 6 7, on right: 4 5 6
factor (16)
    on left: 8 9 10 11, on right: 6 7 8


state 0

    0 $accept: . lines $end

    $default  reduce using rule 3 (lines)

    lines  go to state 1


state 1

    0 $accept: lines . $end
    1 lines: lines . expr '\n'
    2      | lines . '\n'

    $end   shift, and go to state 2
    NOT    shift, and go to state 3
    TRUE   shift, and go to state 4
    FALSE  shift, and go to state 5
    '\n'   shift, and go to state 6
    '('    shift, and go to state 7

    expr    go to state 8
    term    go to state 9
    factor  go to state 10


state 2

    0 $accept: lines $end .

    $default  accept


state 3

    8 factor: NOT . factor

    NOT    shift, and go to state 3
    TRUE   shift, and go to state 4
    FALSE  shift, and go to state 5
    '('    shift, and go to state 7

    factor  go to state 11


state 4

   10 factor: TRUE .

    $default  reduce using rule 10 (factor)


state 5

   11 factor: FALSE .

    $default  reduce using rule 11 (factor)


state 6

    2 lines: lines '\n' .

    $default  reduce using rule 2 (lines)


state 7

    9 factor: '(' . expr ')'

    NOT    shift, and go to state 3
    TRUE   shift, and go to state 4
    FALSE  shift, and go to state 5
    '('    shift, and go to state 7

    expr    go to state 12
    term    go to state 9
    factor  go to state 10


state 8

    1 lines: lines expr . '\n'
    4 expr: expr . OR term

    OR    shift, and go to state 13
    '\n'  shift, and go to state 14


state 9

    5 expr: term .
    6 term: term . AND factor

    AND  shift, and go to state 15

    $default  reduce using rule 5 (expr)


state 10

    7 term: factor .

    $default  reduce using rule 7 (term)


state 11

    8 factor: NOT factor .

    $default  reduce using rule 8 (factor)


state 12

    4 expr: expr . OR term
    9 factor: '(' expr . ')'

    OR   shift, and go to state 13
    ')'  shift, and go to state 16


state 13

    4 expr: expr OR . term

    NOT    shift, and go to state 3
    TRUE   shift, and go to state 4
    FALSE  shift, and go to state 5
    '('    shift, and go to state 7

    term    go to state 17
    factor  go to state 10


state 14

    1 lines: lines expr '\n' .

    $default  reduce using rule 1 (lines)


state 15

    6 term: term AND . factor

    NOT    shift, and go to state 3
    TRUE   shift, and go to state 4
    FALSE  shift, and go to state 5
    '('    shift, and go to state 7

    factor  go to state 18


state 16

    9 factor: '(' expr ')' .

    $default  reduce using rule 9 (factor)


state 17

    4 expr: expr OR term .
    6 term: term . AND factor

    AND  shift, and go to state 15

    $default  reduce using rule 4 (expr)


state 18

    6 term: term AND factor .

    $default  reduce using rule 6 (term)
